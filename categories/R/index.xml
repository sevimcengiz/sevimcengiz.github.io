<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>R on Sevim Cengiz</title><link>https://sevimcengiz.github.io/categories/R/</link><description>Recent content in R on Sevim Cengiz</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 13 Jun 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://sevimcengiz.github.io/categories/R/index.xml" rel="self" type="application/rss+xml"/><item><title>Reading and combining many tidy data files in R</title><link>https://sevimcengiz.github.io/blog/2016/06/13/reading-and-combining-many-tidy-data-files-in-r/</link><pubDate>Mon, 13 Jun 2016 00:00:00 +0000</pubDate><guid>https://sevimcengiz.github.io/blog/2016/06/13/reading-and-combining-many-tidy-data-files-in-r/</guid><description>
&lt;script src="https://sevimcengiz.github.io/rmarkdown-libs/header-attrs/header-attrs.js">&lt;/script>
&lt;p>&lt;strong>Update June 16, 2019:&lt;/strong> &lt;em>This post is now three years old, and some of the advice given is now outdated. Most importantly, it is much better to use &lt;code>map_dfr()&lt;/code> than &lt;code>map(...) %&amp;gt;% reduce(rbind)&lt;/code>.&lt;/em>&lt;/p>
&lt;p>Everybody who is familiar with the R libraries for processing of tidy data, such as &lt;code>dplyr&lt;/code> and &lt;code>ggplot&lt;/code>, knows how powerful they are and how much one can get done with just a few lines of R code. However, similarly, everybody who has used them has probably spent more time bringing data into the appropriate tidy format than writing analysis and/or plotting code. In particular, one scenario that arises all the time is that even if data files are in tidy format, the entire dataset may be spread out over many individual files, and loading them all in and combining them into one large table can be cumbersome. Here, I want to demonstrate some neat tricks, using the relatively new package &lt;code>purrr&lt;/code> and some recent additions to the package &lt;code>tidyr&lt;/code>, that make loading and combining many data files a piece of cake.&lt;/p>
&lt;p>The code shown here depends on the following R packages:&lt;/p>
&lt;pre class="r">&lt;code>require(readr) # for read_csv()
require(dplyr) # for mutate()
require(tidyr) # for unnest()
require(purrr) # for map(), reduce()&lt;/code>&lt;/pre>
&lt;div id="reading-in-all-files-matching-a-given-name" class="section level2">
&lt;h2>Reading in all files matching a given name&lt;/h2>
&lt;p>As an example, we will consider a scenario where we have population census data for various cities, stored in individual csv files for each city. The data I’m using here comes from &lt;a href="http://factfinder.census.gov/" class="uri">http://factfinder.census.gov/&lt;/a>.&lt;/p>
&lt;p>The first scenario we will consider is one where we want to read all csv files in the current working directory. To achieve this goal, we first list all &lt;code>*.csv&lt;/code> files, using the function &lt;code>dir()&lt;/code>. We find that there are three, for the cities Houston, Los Angeles, and New York:&lt;/p>
&lt;pre class="r">&lt;code># find all file names ending in .csv
files &amp;lt;- dir(pattern = &amp;quot;*.csv&amp;quot;)
files&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [1] &amp;quot;Houston_TX.csv&amp;quot; &amp;quot;Los Angeles_CA.csv&amp;quot; &amp;quot;New York_NY.csv&amp;quot;&lt;/code>&lt;/pre>
&lt;p>We can then read in those files and combine them into one data frame using the &lt;code>purrr&lt;/code> functions &lt;code>map()&lt;/code> and &lt;code>reduce()&lt;/code>:&lt;/p>
&lt;pre class="r">&lt;code>data &amp;lt;- files %&amp;gt;%
map(read_csv) %&amp;gt;% # read in all the files individually, using
# the function read_csv() from the readr package
reduce(rbind) # reduce with rbind into one dataframe
data&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Source: local data frame [15 x 3]
##
## location year population
## (chr) (int) (int)
## 1 Houston, TX 2011 2142221
## 2 Houston, TX 2012 2177376
## 3 Houston, TX 2013 2216460
## 4 Houston, TX 2014 2256192
## 5 Houston, TX 2015 2296224
## 6 Los Angeles, CA 2011 3828604
## 7 Los Angeles, CA 2012 3864724
## 8 Los Angeles, CA 2013 3902005
## 9 Los Angeles, CA 2014 3936940
## 10 Los Angeles, CA 2015 3971883
## 11 New York, NY 2011 8287000
## 12 New York, NY 2012 8365069
## 13 New York, NY 2013 8436047
## 14 New York, NY 2014 8495194
## 15 New York, NY 2015 8550405&lt;/code>&lt;/pre>
&lt;p>Often, we want to read the data from a given directory rather than from the current working directory. The ability to define functions on-the-fly in &lt;code>purrr&lt;/code> makes this easy:&lt;/p>
&lt;pre class="r">&lt;code>data_path &amp;lt;- &amp;quot;city_data&amp;quot; # path to the data
files &amp;lt;- dir(data_path, pattern = &amp;quot;*.csv&amp;quot;) # get file names
data &amp;lt;- files %&amp;gt;%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(data_path, .))) %&amp;gt;%
reduce(rbind)
data&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Source: local data frame [15 x 3]
##
## location year population
## (chr) (int) (int)
## 1 Houston, TX 2011 2142221
## 2 Houston, TX 2012 2177376
## 3 Houston, TX 2013 2216460
## 4 Houston, TX 2014 2256192
## 5 Houston, TX 2015 2296224
## 6 Los Angeles, CA 2011 3828604
## 7 Los Angeles, CA 2012 3864724
## 8 Los Angeles, CA 2013 3902005
## 9 Los Angeles, CA 2014 3936940
## 10 Los Angeles, CA 2015 3971883
## 11 New York, NY 2011 8287000
## 12 New York, NY 2012 8365069
## 13 New York, NY 2013 8436047
## 14 New York, NY 2014 8495194
## 15 New York, NY 2015 8550405&lt;/code>&lt;/pre>
&lt;p>Here, the expression &lt;code>~ read_csv(file.path(data_path, .))&lt;/code> is a shortcut for the anonymous function definition &lt;code>function(x) read_csv(file.path(data_path, x))&lt;/code>:&lt;/p>
&lt;pre class="r">&lt;code># this code does the exact same thing as the previous code
data &amp;lt;- files %&amp;gt;%
map(function(x) read_csv(file.path(data_path, x))) %&amp;gt;%
reduce(rbind)
data&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Source: local data frame [15 x 3]
##
## location year population
## (chr) (int) (int)
## 1 Houston, TX 2011 2142221
## 2 Houston, TX 2012 2177376
## 3 Houston, TX 2013 2216460
## 4 Houston, TX 2014 2256192
## 5 Houston, TX 2015 2296224
## 6 Los Angeles, CA 2011 3828604
## 7 Los Angeles, CA 2012 3864724
## 8 Los Angeles, CA 2013 3902005
## 9 Los Angeles, CA 2014 3936940
## 10 Los Angeles, CA 2015 3971883
## 11 New York, NY 2011 8287000
## 12 New York, NY 2012 8365069
## 13 New York, NY 2013 8436047
## 14 New York, NY 2014 8495194
## 15 New York, NY 2015 8550405&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="keeping-auxilliary-information-about-the-files-read" class="section level2">
&lt;h2>Keeping auxilliary information about the files read&lt;/h2>
&lt;p>One limitation of the previous approach is that we don’t keep any auxilliary information we may want to, such as the filenames of the files read. To keep the filename alongside the data, we can read the data into a nested dataframe rather than a list, using the &lt;code>mutate()&lt;/code> function from &lt;code>dplyr&lt;/code>. This gives us the following result:&lt;/p>
&lt;pre class="r">&lt;code>data &amp;lt;- data_frame(filename = files) %&amp;gt;% # create a data frame
# holding the file names
mutate(file_contents = map(filename, # read files into
~ read_csv(file.path(data_path, .))) # a new data column
)
data&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Source: local data frame [3 x 2]
##
## filename file_contents
## (chr) (chr)
## 1 Houston_TX.csv &amp;lt;tbl_df [5,3]&amp;gt;
## 2 Los Angeles_CA.csv &amp;lt;tbl_df [5,3]&amp;gt;
## 3 New York_NY.csv &amp;lt;tbl_df [5,3]&amp;gt;&lt;/code>&lt;/pre>
&lt;p>To turn this data frame into one useful for downstream analysis, we use the function &lt;code>unnest()&lt;/code> from &lt;code>tidyr&lt;/code>:&lt;/p>
&lt;pre class="r">&lt;code>unnest(data)&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Source: local data frame [15 x 4]
##
## filename location year population
## (chr) (chr) (int) (int)
## 1 Houston_TX.csv Houston, TX 2011 2142221
## 2 Houston_TX.csv Houston, TX 2012 2177376
## 3 Houston_TX.csv Houston, TX 2013 2216460
## 4 Houston_TX.csv Houston, TX 2014 2256192
## 5 Houston_TX.csv Houston, TX 2015 2296224
## 6 Los Angeles_CA.csv Los Angeles, CA 2011 3828604
## 7 Los Angeles_CA.csv Los Angeles, CA 2012 3864724
## 8 Los Angeles_CA.csv Los Angeles, CA 2013 3902005
## 9 Los Angeles_CA.csv Los Angeles, CA 2014 3936940
## 10 Los Angeles_CA.csv Los Angeles, CA 2015 3971883
## 11 New York_NY.csv New York, NY 2011 8287000
## 12 New York_NY.csv New York, NY 2012 8365069
## 13 New York_NY.csv New York, NY 2013 8436047
## 14 New York_NY.csv New York, NY 2014 8495194
## 15 New York_NY.csv New York, NY 2015 8550405&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="creating-filenames-from-data" class="section level2">
&lt;h2>Creating filenames from data&lt;/h2>
&lt;p>In the previous examples, we have read in all the data files in a given directory. Often, however, we would rather read in specific files based on other data we have. For example, let’s assume we have the following data table:&lt;/p>
&lt;pre class="r">&lt;code>cities &amp;lt;- data_frame(city = c(&amp;quot;New York&amp;quot;, &amp;quot;Houston&amp;quot;),
state = c(&amp;quot;NY&amp;quot;, &amp;quot;TX&amp;quot;),
area = c(305, 599.6))
cities&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Source: local data frame [2 x 3]
##
## city state area
## (chr) (chr) (dbl)
## 1 New York NY 305.0
## 2 Houston TX 599.6&lt;/code>&lt;/pre>
&lt;p>We want to use the city and state columns to create appropriate filenames and then load in the corresponding files. The code in its entirety looks as follows:&lt;/p>
&lt;pre class="r">&lt;code>data &amp;lt;- cities %&amp;gt;% # start with the cities table
# create filenames
mutate(filename = paste(city, &amp;quot;_&amp;quot;, state, &amp;quot;.csv&amp;quot;, sep=&amp;quot;&amp;quot;)) %&amp;gt;%
# read in data
mutate(file_contents = map(filename,
~ read_csv(file.path(data_path, .)))
) %&amp;gt;%
select(-filename) %&amp;gt;% # remove filenames, not needed anynmore
unnest() %&amp;gt;% # unnest
select(-location) # remove location column, not needed
# since we have city and state columns
data&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Source: local data frame [10 x 5]
##
## city state area year population
## (chr) (chr) (dbl) (int) (int)
## 1 New York NY 305.0 2011 8287000
## 2 New York NY 305.0 2012 8365069
## 3 New York NY 305.0 2013 8436047
## 4 New York NY 305.0 2014 8495194
## 5 New York NY 305.0 2015 8550405
## 6 Houston TX 599.6 2011 2142221
## 7 Houston TX 599.6 2012 2177376
## 8 Houston TX 599.6 2013 2216460
## 9 Houston TX 599.6 2014 2256192
## 10 Houston TX 599.6 2015 2296224&lt;/code>&lt;/pre>
&lt;p>I hope you have found these examples useful, and you will start loading files into nested data frames.&lt;/p>
&lt;/div></description></item><item><title>cowplot R package now available on CRAN</title><link>https://sevimcengiz.github.io/blog/2015/06/04/cowplot-r-package-now-available-on-cran/</link><pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate><guid>https://sevimcengiz.github.io/blog/2015/06/04/cowplot-r-package-now-available-on-cran/</guid><description>
&lt;script src="https://sevimcengiz.github.io/rmarkdown-libs/header-attrs/header-attrs.js">&lt;/script>
&lt;p>This week, I finally took the time to clean up the code for my cowplot R package and &lt;a href="http://cran.r-project.org/web/packages/cowplot/index.html">submit it to CRAN.&lt;/a> While the code had been up on &lt;a href="https://github.com/wilkelab/cowplot">github for a while,&lt;/a> and I had &lt;a href="https://sevimcengiz.github.io/blog/2014/10/7/to-grid-or-not-to-grid">blogged about it previously,&lt;/a> nobody had really taken notice as far as I can tell. However, this time, with an official release and better documentation, people seem to like it a lot. The response on Twitter was overwhelming.&lt;/p>
&lt;blockquote class="twitter-tweet" lang="en">
&lt;p lang="en" dir="ltr">
&lt;a href="https://twitter.com/ClausWilke">&lt;span class="citation">@ClausWilke&lt;/span>&lt;/a> Thank you! Thank you!
&lt;/p>
— Shaun Jackman (&lt;span class="citation">@sjackman&lt;/span>) &lt;a href="https://twitter.com/sjackman/status/606215710549774336">June 3, 2015&lt;/a>
&lt;/blockquote>
&lt;blockquote class="twitter-tweet" lang="en">
&lt;p lang="en" dir="ltr">
&lt;a href="https://twitter.com/ClausWilke">&lt;span class="citation">@ClausWilke&lt;/span>&lt;/a> &lt;a href="https://twitter.com/hadleywickham">&lt;span class="citation">@hadleywickham&lt;/span>&lt;/a> thank you, and goodbye illustrator, Photoshop, imagemagick, etc.
&lt;/p>
— Stephen Turner (&lt;span class="citation">@genetics_blog&lt;/span>) &lt;a href="https://twitter.com/genetics_blog/status/606221366736654337">June 3, 2015&lt;/a>
&lt;/blockquote>
&lt;blockquote class="twitter-tweet" lang="en">
&lt;p lang="en" dir="ltr">
&lt;a href="https://twitter.com/ClausWilke">&lt;span class="citation">@ClausWilke&lt;/span>&lt;/a> &lt;a href="https://twitter.com/hadleywickham">&lt;span class="citation">@hadleywickham&lt;/span>&lt;/a> awesome !!! This makes making figures so easy !!
&lt;/p>
— sahil seth (&lt;span class="citation">@sethsa&lt;/span>) &lt;a href="https://twitter.com/sethsa/status/606282681907691520">June 4, 2015&lt;/a>
&lt;/blockquote>
&lt;blockquote class="twitter-tweet" lang="en">
&lt;p lang="en" dir="ltr">
I love that the name cowplot is based on &lt;a href="https://twitter.com/ClausWilke">&lt;span class="citation">@ClausWilke&lt;/span>&lt;/a>'s initials. New goal: create a package named madplot some day. :)
&lt;/p>
— Meghan Duffy (&lt;span class="citation">@duffy_ma&lt;/span>) &lt;a href="https://twitter.com/duffy_ma/status/606450829604880386">June 4, 2015&lt;/a>
&lt;/blockquote>
&lt;blockquote class="twitter-tweet" lang="en">
&lt;p lang="en" dir="ltr">
New R pkg makes it easy to custom arrange, label ggplots on a canvas &lt;a href="http://t.co/EQGjq9rOAE">http://t.co/EQGjq9rOAE&lt;/a> By &lt;a href="https://twitter.com/ClausWilke">&lt;span class="citation">@ClausWilke&lt;/span>&lt;/a> &lt;a href="https://twitter.com/hashtag/rstats?src=hash">#rstats&lt;/a> &lt;a href="http://t.co/Wi2kL3RnIw">pic.twitter.com/Wi2kL3RnIw&lt;/a>
&lt;/p>
— Sharon Machlis (&lt;span class="citation">@sharon000&lt;/span>) &lt;a href="https://twitter.com/sharon000/status/606476793558614016">June 4, 2015&lt;/a>
&lt;/blockquote>
&lt;blockquote class="twitter-tweet" lang="en">
&lt;p lang="en" dir="ltr">
This looks awesome… I've been struggling with this issue a lot the last week or so. &lt;a href="https://t.co/8YxNdocqMd">https://t.co/8YxNdocqMd&lt;/a>
&lt;/p>
— Andrew Kniss (&lt;span class="citation">@WyoWeeds&lt;/span>) &lt;a href="https://twitter.com/WyoWeeds/status/606482691433766914">June 4, 2015&lt;/a>
&lt;/blockquote>
&lt;blockquote class="twitter-tweet" lang="en">
&lt;p lang="en" dir="ltr">
(A big thank you to &lt;a href="https://twitter.com/ClausWilke">&lt;span class="citation">@ClausWilke&lt;/span>&lt;/a> for developing the cowplot package so I could make this 2-panel figure.) &lt;a href="https://twitter.com/hashtag/Rstats?src=hash">#Rstats&lt;/a> &lt;a href="https://twitter.com/hashtag/ggplot?src=hash">#ggplot&lt;/a>
&lt;/p>
— Andrew Kniss (&lt;span class="citation">@WyoWeeds&lt;/span>) &lt;a href="https://twitter.com/WyoWeeds/status/606572020004839424">June 4, 2015&lt;/a>
&lt;/blockquote>
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></description></item></channel></rss>