<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogdown on Sevim Cengiz</title><link>https://sevimcengiz.github.io/tags/Blogdown/</link><description>Recent content in Blogdown on Sevim Cengiz</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 08 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://sevimcengiz.github.io/tags/Blogdown/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing a blogdown post for the ages</title><link>https://sevimcengiz.github.io/blog/2020/09/08/a-blogdown-post-for-the-ages/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://sevimcengiz.github.io/blog/2020/09/08/a-blogdown-post-for-the-ages/</guid><description>
&lt;script src="https://sevimcengiz.github.io/rmarkdown-libs/header-attrs/header-attrs.js">&lt;/script>
&lt;p>The R package &lt;a href="https://bookdown.org/yihui/blogdown/">blogdown&lt;/a> has become a widely popular solution to setting up personal blogs. It makes it super easy to set up quite elaborate websites, and to write posts that contain R code, generated output and figures, footnotes, figure references, and math.&lt;a href="#fn1" class="footnote-ref" id="fnref1">&lt;sup>1&lt;/sup>&lt;/a> However, one problem with blogdown is that it likes to re-knit &lt;code>.Rmd&lt;/code> files.&lt;a href="#fn2" class="footnote-ref" id="fnref2">&lt;sup>2&lt;/sup>&lt;/a> This may be fine if you’re just starting out with your site or if your posts generally don’t contain any sophisticated R code, but in a long-standing blog you’ll eventually run into trouble. First, re-knitting hundreds of posts may be quite slow. And second, if you’ve got a bunch of old posts chances are some will not knit anymore, and then you may have got a serious problem with no simple solution.&lt;/p>
&lt;p>This problem has been recognized for a while, and the proposed solution is usually to knit only on demand. See e.g. &lt;a href="https://yutani.rbind.io/post/2017-10-25-blogdown-custom/">here&lt;/a>. The experimental &lt;a href="https://github.com/r-lib/hugodown">hugodown package&lt;/a> likewise aims to limit any unnecessary re-knitting. Here, I’m taking a different approach. My perspective is that I want to be able to re-knit any time without worrying that I’ll destroy anything of value, and I also want to be able to add code and output to posts containing prior code that doesn’t run anymore today.&lt;/p>
&lt;p>My approach is to copy the knitted markdown code and output back into the &lt;code>.Rmd&lt;/code> file. This requires some amount of manual work, but it’s not that bad, and I value the benefits I get from this approach. Maybe at some point somebody will write a package that can automate this process.&lt;/p>
&lt;p>I do not necessarily recommend the approach I’m taking here. This post is mostly for my own purposes, so I can retrace my steps in the future. If you want to see the source code resulting from this process, you can check out the &lt;a href="https://github.com/clauswilke/clauswilke.github.io/blob/master/content/blog/2020-09-08-a-blogdown-post-for-the-ages/index.Rmd">source for this post&lt;/a> on github.&lt;/p>
&lt;p>To provide an example scenario, I include here one chunk of R code that generates a figure. This code has various features that will likely generate issues in the future or in a blog with many posts:&lt;/p>
&lt;ul>
&lt;li>It depends on a bunch of packages, including one only available from github.&lt;/li>
&lt;li>It uses various fonts that need to be installed locally.&lt;/li>
&lt;li>It is slow to render.&lt;/li>
&lt;/ul>
&lt;p>So it is critical that we can capture the output and don’t ever have to re-render it again.&lt;/p>
&lt;p>Here is the example:&lt;/p>
&lt;pre class="r">&lt;code>library(tidyverse)
library(cowplot)
library(colorspace)
library(sf)
library(ggtext)
# attach data set, requires practicalgg package
# remotes::install_github(&amp;quot;wilkelab/practicalgg&amp;quot;)
data(texas_income, package = &amp;quot;practicalgg&amp;quot;)
ggplot(texas_income, aes(fill = estimate)) +
geom_sf(color = &amp;quot;white&amp;quot;) +
coord_sf(xlim = c(538250, 2125629), crs = 3083) +
scale_fill_continuous_sequential(
palette = &amp;quot;Blues&amp;quot;, rev = TRUE,
na.value = &amp;quot;grey60&amp;quot;,
name = &amp;quot;annual median income (USD)&amp;quot;,
limits = c(18000, 90000),
breaks = 20000*c(1:4),
labels = c(&amp;quot;$20,000&amp;quot;, &amp;quot;$40,000&amp;quot;, &amp;quot;$60,000&amp;quot;, &amp;quot;$80,000&amp;quot;),
guide = guide_colorbar(
direction = &amp;quot;horizontal&amp;quot;,
label.position = &amp;quot;bottom&amp;quot;,
title.position = &amp;quot;top&amp;quot;,
barwidth = grid::unit(3.0, &amp;quot;in&amp;quot;),
barheight = grid::unit(0.2, &amp;quot;in&amp;quot;)
)
) +
labs(caption = &amp;quot;
&amp;lt;span style=&amp;#39;font-family: \&amp;quot;Font Awesome 5 Brands\&amp;quot;&amp;#39;&amp;gt;&amp;amp;#xf099;&amp;lt;/span&amp;gt;
@clauswilke&amp;lt;br&amp;gt;
&amp;lt;span style=&amp;#39;font-family: \&amp;quot;Font Awesome 5 Free Solid\&amp;quot;&amp;#39;&amp;gt;&amp;amp;#xf781;&amp;lt;/span&amp;gt;
clauswilke.com
&amp;quot;) +
theme_map(12, font_family = &amp;quot;Myriad Pro&amp;quot;) +
theme(
legend.title.align = 0.5,
legend.text.align = 0.5,
legend.justification = c(0, 0),
legend.position = c(0.02, 0.1),
plot.caption = element_markdown()
)&lt;/code>&lt;/pre>
&lt;div class="figure">&lt;span id="fig:map-Texas-income">&lt;/span>
&lt;img src="figure-html/map-Texas-income-1.png" alt="Median annual income in Texas counties. Figure redrawn from: Wilke (2019) Fundamentals of Data Visualization, Chapter 4." width="576" />
&lt;p class="caption">
Figure 1: Median annual income in Texas counties. Figure redrawn from: Wilke (2019) Fundamentals of Data Visualization, &lt;a href="https://clauswilke.com/dataviz/color-basics.html">Chapter 4.&lt;/a>
&lt;/p>
&lt;/div>
&lt;p>Next I’ll provide the exact recipe I follow to capture the output from such code.&lt;/p>
&lt;ol style="list-style-type: decimal">
&lt;li>&lt;p>At the top of your &lt;code>.Rmd&lt;/code> file, add an R chunk containing the following:&lt;/p>
&lt;pre>&lt;code>```{r echo = FALSE}
knitr::opts_chunk$set(fig.retina = 2)
```&lt;/code>&lt;/pre>
&lt;p>This will ensure that figures are rendered in high quality. Set &lt;code>echo = FALSE&lt;/code> for this chunk so the code isn’t included in the rendered output.&lt;/p>&lt;/li>
&lt;li>&lt;p>Stop the blogdown server with &lt;code>blogdown::stop_server()&lt;/code>. We don’t want the server to try to create blog posts out of the intermediate files we’ll be creating.&lt;/p>&lt;/li>
&lt;li>&lt;p>Add the following to the yaml section of your post:&lt;/p>
&lt;pre>&lt;code>output:
&amp;nbsp;&amp;nbsp;html_document:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;keep_md: yes
&lt;/code>&lt;/pre>
&lt;p>If you want to use bookdown-style automated figure references, use this snippet instead:&lt;/p>
&lt;pre>&lt;code>output:
&amp;nbsp;&amp;nbsp;bookdown::html_document2:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;keep_md: yes
&lt;/code>&lt;/pre>
&lt;p>This requires the bookdown package to be installed.&lt;/p>&lt;/li>
&lt;li>&lt;p>Knit your post. You will end up with a new file &lt;code>index.md&lt;/code> and a new folder called &lt;code>index_files&lt;/code>. The former contains the markdown code that knitr has generated and the latter contains any generated figures.&lt;/p>&lt;/li>
&lt;li>&lt;p>Now you want to copy the generated code and output chunks from &lt;code>index.md&lt;/code> back into &lt;code>index.Rmd&lt;/code>. For each code chunk in your &lt;code>.Rmd&lt;/code> file, there will be one or more markdown chunks, which are fenced with &lt;code>```r ...```&lt;/code>. There will also be markdown or HTML code to include any generated figures. Place all of this material after the respective code chunk from which it originated, but &lt;strong>do not delete&lt;/strong> the original code chunk. We want to keep the original code chunks around in case we do want to re-run some of the R code again in the future, e.g. if the post needs an update.&lt;/p>&lt;/li>
&lt;li>&lt;p>Next, you need to move the generated figures into a safe location. This ensures that they won’t be deleted when blogdown rebuilds the site the next time. I simply move the folder &lt;code>index_files/figure-html&lt;/code> to &lt;code>figure-html&lt;/code>.&lt;/p>&lt;/li>
&lt;li>&lt;p>Edit figure links to reflect the move from the previous step. Figure links may be included either as markdown links, such as &lt;code>![](index_files/figure-html/map-Texas-income-1.png)&lt;/code>, or as html links, such as &lt;code>&amp;lt;img src="https://sevimcengiz.github.io/blog/2020-09-08-a-blogdown-post-for-the-ages/index_files/figure-html/map-Texas-income-1.png" ...&lt;/code>. Which is the case depends on the exact chunk options you used to generate the figure. In either case, delete &lt;code>index_files/&lt;/code> from all figure links.&lt;/p>&lt;/li>
&lt;li>&lt;p>Delete the file &lt;code>index.md&lt;/code>.&lt;/p>&lt;/li>
&lt;li>&lt;p>Remove or comment out the &lt;code>output:&lt;/code> block you added under step 3.&lt;/p>&lt;/li>
&lt;li>&lt;p>Add the following line to the code chunk added under step 1:&lt;br />
&lt;/p>
&lt;pre>&lt;code>knitr::opts_chunk$set(echo = FALSE, eval = FALSE)
&lt;/code>&lt;/pre>
&lt;p>This turns off all the R Markdown chunks in your post.&lt;/p>&lt;/li>
&lt;li>&lt;p>Restart the blogdown server with &lt;code>blogdown::serve_site()&lt;/code>.&lt;/p>&lt;/li>
&lt;/ol>
&lt;p>This may seem like a lot of steps and a lot of fiddling, but it’s really not that bad once you get the hang of it. Most blog posts, even elaborate ones, don’t have that many code chunks or figures, and manually copying and adjusting the markdown code takes much less time than writing the blog post in the first place.&lt;/p>
&lt;p>In the future, if you need to update your post, you can either re-run all code by commenting out the line you added in step 10, or you can selectively turn on individual R chunks by setting their &lt;code>echo&lt;/code> and &lt;code>eval&lt;/code> options to &lt;code>TRUE&lt;/code>. Then you repeat steps 1 through 11, but copying only whichever output needs to be newly copied over. At the end make sure you disable all R chunks once again.&lt;/p>
&lt;div class="footnotes">
&lt;hr />
&lt;ol>
&lt;li id="fn1">&lt;p>This post has one figure, Figure &lt;a href="#fig:map-Texas-income">1&lt;/a>. It also has one equation, &lt;span class="math inline">\(a^2 + b^2 = c^2\)&lt;/span>. The equation serves no purpose here.&lt;a href="#fnref1" class="footnote-back">↩︎&lt;/a>&lt;/p>&lt;/li>
&lt;li id="fn2">&lt;p>Throughout, I’m assuming you’re using &lt;code>.Rmd&lt;/code> files. Everything I say should be valid for &lt;code>.Rmarkdown&lt;/code> as well, though I haven’t tested this.&lt;a href="#fnref2" class="footnote-back">↩︎&lt;/a>&lt;/p>&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>New site design</title><link>https://sevimcengiz.github.io/blog/2020/08/19/new-site-design/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><guid>https://sevimcengiz.github.io/blog/2020/08/19/new-site-design/</guid><description>
&lt;script src="https://sevimcengiz.github.io/rmarkdown-libs/header-attrs/header-attrs.js">&lt;/script>
&lt;p>It was time for a redesign. The previous layout was five years old, and it was looking dated. More importantly, the framework I had used wasn’t working for me anymore. I needed something simpler, more elegant, and more powerful.&lt;/p>
&lt;p>My previous redesign happened exactly &lt;a href="https://sevimcengiz.github.io/blog/2015/08/06/goodbye-squarespace/">five years ago,&lt;/a> when I moved this site from Squarespace to GitHub Pages with Jekyll. The transition to the static site generator Jekyll served me well, as it allowed me to write sites in Markdown and made it easier (compared to Squarespace) to include code examples. However, in many ways it was still too cumbersome, and in the end I rarely blogged anymore. At the same time, I was increasingly using R Markdown, and I have now &lt;a href="https://sevimcengiz.github.io/blog/2018/01/23/fundamentals-of-data-visualization/">written an entire book&lt;/a> using this technology. This made me realize that I needed an R Markdown-based blog as well. Thus, the latest iteration of this site is built with the &lt;a href="https://bookdown.org/yihui/blogdown/">blogdown package,&lt;/a> using the widely popular Hugo theme &lt;a href="https://sourcethemes.com/academic/">Academic.&lt;/a>
With the redesign also comes a move of the site from serialmentor.com to clauswilke.com. This was actually the original site location, though it existed only for a few days in August 2013. Going forward, I see this more as a personal site than a blog dedicated to a specific topic, and thus hosting it under my name seems the most appropriate. All the old posts will remain up, though, and links should automatically be forwarded.&lt;/p>
&lt;p>However, for technical reasons, it doesn’t seem possible to forward links to the site for my dataviz book, now located at &lt;a href="https://clauswilke.com/dataviz" class="uri">https://clauswilke.com/dataviz&lt;/a>, formerly at &lt;a href="https://serialmentor.com/dataviz" class="uri">https://serialmentor.com/dataviz&lt;/a>. Thus, if you visit that site regularly, you’ll have to update your bookmarks.&lt;/p></description></item></channel></rss>